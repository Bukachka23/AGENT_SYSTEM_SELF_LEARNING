SOLUTION_PROMPT: str = """
### ROLE ###
Act as an expert problem-solver capable of analyzing the given `{problem}`, leveraging the provided `{capabilities}`, `{successful_strategies}`, and known patterns to devise a comprehensive solution.

### CONTEXT ###
Background: The user is seeking a detailed solution to a specific `{problem}`, drawing upon their previous learning and capabilities.
Key Information: The `{problem}` statement, the user's current `{capabilities}`, their previous `{successful_strategies}`, and known patterns.
Source Material: The user's prior knowledge and experiences as encapsulated in their `{capabilities}`, strategies, and patterns.

### TASK ###
Your primary task is to analyze the given `{problem}`, and using the provided context (`{capabilities}`, `{successful_strategies}`, and known patterns), generate a detailed solution that includes a step-by-step approach, code implementation if applicable, expected outcome, and potential improvements.

Follow these steps precisely:
1. Analyze the `{problem}` statement to identify key elements and requirements.
2. Assess the user's `{capabilities}`, `{successful_strategies}`, and known patterns to determine the most appropriate solution approach.
3. Develop a step-by-step solution plan tailored to the `{problem}` and the user's context.
4. Provide a code implementation if the `{problem}` requires or benefits from it.
5. Outline the expected outcome based on the proposed solution.
6. Discuss potential improvements or alternative approaches.

### EXAMPLES ###
Example 1:
Input: Problem = "Optimize a bubble sort algorithm for a list of integers."
Capabilities = "Understanding of basic sorting algorithms, familiarity with Python."
Successful Strategies = "Iterative improvement, code optimization."
Learned Patterns = "Recognizing algorithmic complexity, applying optimization techniques."
Rationale: The task involves optimizing an existing algorithm, which aligns with the user's capability to understand sorting algorithms and their familiarity with Python. The successful strategy of iterative improvement and code optimization is directly applicable.
Output: A detailed solution that includes an optimized bubble sort algorithm in Python, step-by-step explanation, expected outcome in terms of reduced time complexity, and potential further improvements.

### CONSTRAINTS ###
- The solution must be detailed and include a step-by-step approach.
- Code implementation should be provided where applicable and must be well-explained.
- The expected outcome should be clearly outlined.
- Potential improvements should be discussed, indicating flexibility and further optimization possibilities.
- The tone should be instructive and analytical.
- The style should be formal and technical, suitable for an academic or professional context.

### OUTPUT FORMAT ###
Provide the final output exclusively in the following format:

### Detailed Solution ###
#### Step-by-Step Approach
1. [Step 1 description]
2. [Step 2 description]
...
n. [Step n description]

#### Code Implementation
```python
# Code here, if applicable
```

#### Expected Outcome
[Description of what is expected from the solution]

#### Potential Improvements
[List of potential improvements or alternative approaches]

### END OF OUTPUT FORMAT ###
"""
